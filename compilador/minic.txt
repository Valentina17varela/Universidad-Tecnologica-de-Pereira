Grammar:

Rule 0     S' -> program
Rule 1     program -> declarations
Rule 2     declarations -> _1_repeat
Rule 3     _1_repeat -> _1_items
Rule 4     _1_repeat -> <empty>
Rule 5     _1_items -> _1_items _1_item
Rule 6     _1_items -> _1_item
Rule 7     _1_item -> declaration
Rule 8     declaration -> statement
Rule 9     declaration -> class_declaration
Rule 10    declaration -> func_declaration
Rule 11    declaration -> var_declaration
Rule 12    var_declaration -> VAR IDENTIFIER _2_optional ;
Rule 13    _2_optional -> = expression  [precedence=right, level=1]
Rule 14    _2_optional -> <empty>
Rule 15    func_declaration -> FUN function
Rule 16    function -> IDENTIFIER ( ) statement_block
Rule 17    function -> IDENTIFIER ( parameters ) statement_block
Rule 18    parameters -> IDENTIFIER _3_repeat
Rule 19    _3_repeat -> _3_items
Rule 20    _3_repeat -> <empty>
Rule 21    _3_items -> _3_items _3_item
Rule 22    _3_items -> _3_item
Rule 23    _3_item -> , IDENTIFIER
Rule 24    class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat }
Rule 25    _4_optional -> LT IDENTIFIER
Rule 26    _4_optional -> <empty>
Rule 27    _5_repeat -> _5_items
Rule 28    _5_repeat -> <empty>
Rule 29    _5_items -> _5_items _5_item
Rule 30    _5_items -> _5_item
Rule 31    _5_item -> function
Rule 32    statement -> return_statement
Rule 33    statement -> for_statement
Rule 34    statement -> while_statement
Rule 35    statement -> if_statement
Rule 36    statement -> print_statement
Rule 37    statement -> expression_statement
Rule 38    statement -> statement_block
Rule 39    statement_block -> { declarations }
Rule 40    expression_statement -> expression ;
Rule 41    print_statement -> PRINT expression ;
Rule 42    if_statement -> IF ( expression ) statement _6_optional
Rule 43    _6_optional -> ELSE statement
Rule 44    _6_optional -> <empty>
Rule 45    while_statement -> WHILE ( expression ) statement
Rule 46    for_statement -> FOR ( ; _7_optional ; _8_optional ) statement
Rule 47    _7_optional -> expression
Rule 48    _7_optional -> <empty>
Rule 49    _8_optional -> expression
Rule 50    _8_optional -> <empty>
Rule 51    for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement
Rule 52    _9_optional -> expression
Rule 53    _9_optional -> <empty>
Rule 54    _10_optional -> expression
Rule 55    _10_optional -> <empty>
Rule 56    for_initializer -> expression_statement
Rule 57    for_initializer -> var_declaration
Rule 58    return_statement -> RETURN expression ;
Rule 59    expression -> factor
Rule 60    expression -> expression NE expression  [precedence=left, level=4]
Rule 61    expression -> expression EQ expression  [precedence=left, level=4]
Rule 62    expression -> expression GE expression  [precedence=left, level=5]
Rule 63    expression -> expression GT expression  [precedence=left, level=5]
Rule 64    expression -> expression LE expression  [precedence=left, level=5]
Rule 65    expression -> expression LT expression  [precedence=left, level=5]
Rule 66    expression -> expression / expression  [precedence=left, level=7]
Rule 67    expression -> expression * expression  [precedence=left, level=7]
Rule 68    expression -> expression - expression  [precedence=left, level=6]
Rule 69    expression -> expression + expression  [precedence=left, level=6]
Rule 70    expression -> expression AND expression  [precedence=left, level=3]
Rule 71    expression -> expression OR expression  [precedence=left, level=2]
Rule 72    expression -> expression = expression  [precedence=right, level=1]
Rule 73    factor -> factor ( )
Rule 74    factor -> factor ( arguments )
Rule 75    factor -> factor . IDENTIFIER
Rule 76    factor -> SUPER . IDENTIFIER
Rule 77    factor -> THIS
Rule 78    factor -> IDENTIFIER
Rule 79    factor -> NIL
Rule 80    factor -> FALSE
Rule 81    factor -> TRUE
Rule 82    factor -> STRING
Rule 83    factor -> NUMBER
Rule 84    factor -> NOT factor  [precedence=right, level=8]
Rule 85    factor -> - factor  [precedence=right, level=8]
Rule 86    factor -> ( expression )
Rule 87    arguments -> expression _11_repeat
Rule 88    _11_repeat -> _11_items
Rule 89    _11_repeat -> <empty>
Rule 90    _11_items -> _11_items _11_item
Rule 91    _11_items -> _11_item
Rule 92    _11_item -> , expression

Terminals, with rules where they appear:

(                    : 16 17 42 45 46 51 73 74 86
)                    : 16 17 42 45 46 51 73 74 86
*                    : 67
+                    : 69
,                    : 23 92
-                    : 68 85
.                    : 75 76
/                    : 66
;                    : 12 40 41 46 46 51 58
=                    : 13 72
AND                  : 70
CLASS                : 24
ELSE                 : 43
EQ                   : 61
FALSE                : 80
FOR                  : 46 51
FUN                  : 15
GE                   : 62
GT                   : 63
IDENTIFIER           : 12 16 17 18 23 24 25 75 76 78
IF                   : 42
LE                   : 64
LT                   : 25 65
NE                   : 60
NIL                  : 79
NOT                  : 84
NUMBER               : 83
OR                   : 71
PRINT                : 41
RETURN               : 58
STRING               : 82
SUPER                : 76
THIS                 : 77
TRUE                 : 81
VAR                  : 12
WHILE                : 45
error                : 
{                    : 24 39
}                    : 24 39

Nonterminals, with rules where they appear:

_10_optional         : 51
_11_item             : 90 91
_11_items            : 88 90
_11_repeat           : 87
_1_item              : 5 6
_1_items             : 3 5
_1_repeat            : 2
_2_optional          : 12
_3_item              : 21 22
_3_items             : 19 21
_3_repeat            : 18
_4_optional          : 24
_5_item              : 29 30
_5_items             : 27 29
_5_repeat            : 24
_6_optional          : 42
_7_optional          : 46
_8_optional          : 46
_9_optional          : 51
arguments            : 74
class_declaration    : 9
declaration          : 7
declarations         : 1 39
expression           : 13 40 41 42 45 47 49 52 54 58 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 86 87 92
expression_statement : 37 56
factor               : 59 73 74 75 84 85
for_initializer      : 51
for_statement        : 33
func_declaration     : 10
function             : 15 31
if_statement         : 35
parameters           : 17
print_statement      : 36
program              : 0
return_statement     : 32
statement            : 8 42 43 45 46 51
statement_block      : 16 17 38
var_declaration      : 11 57
while_statement      : 34


state 0

    (0) S' -> . program
    (1) program -> . declarations
    (2) declarations -> . _1_repeat
    (3) _1_repeat -> . _1_items
    (4) _1_repeat -> .
    (5) _1_items -> . _1_items _1_item
    (6) _1_items -> . _1_item
    (7) _1_item -> . declaration
    (8) declaration -> . statement
    (9) declaration -> . class_declaration
    (10) declaration -> . func_declaration
    (11) declaration -> . var_declaration
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (24) class_declaration -> . CLASS IDENTIFIER _4_optional { _5_repeat }
    (15) func_declaration -> . FUN function
    (12) var_declaration -> . VAR IDENTIFIER _2_optional ;
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    $end            reduce using rule 4 (_1_repeat -> .)
    CLASS           shift and go to state 18
    FUN             shift and go to state 21
    VAR             shift and go to state 22
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    program                        shift and go to state 1
    declarations                   shift and go to state 2
    _1_repeat                      shift and go to state 3
    _1_items                       shift and go to state 4
    _1_item                        shift and go to state 5
    declaration                    shift and go to state 6
    statement                      shift and go to state 7
    class_declaration              shift and go to state 8
    func_declaration               shift and go to state 9
    var_declaration                shift and go to state 10
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 1

    (0) S' -> program .


state 2

    (1) program -> declarations .
    $end            reduce using rule 1 (program -> declarations .)


state 3

    (2) declarations -> _1_repeat .
    $end            reduce using rule 2 (declarations -> _1_repeat .)
    }               reduce using rule 2 (declarations -> _1_repeat .)


state 4

    (3) _1_repeat -> _1_items .
    (5) _1_items -> _1_items . _1_item
    (7) _1_item -> . declaration
    (8) declaration -> . statement
    (9) declaration -> . class_declaration
    (10) declaration -> . func_declaration
    (11) declaration -> . var_declaration
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (24) class_declaration -> . CLASS IDENTIFIER _4_optional { _5_repeat }
    (15) func_declaration -> . FUN function
    (12) var_declaration -> . VAR IDENTIFIER _2_optional ;
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    $end            reduce using rule 3 (_1_repeat -> _1_items .)
    }               reduce using rule 3 (_1_repeat -> _1_items .)
    CLASS           shift and go to state 18
    FUN             shift and go to state 21
    VAR             shift and go to state 22
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    _1_item                        shift and go to state 40
    declaration                    shift and go to state 6
    statement                      shift and go to state 7
    class_declaration              shift and go to state 8
    func_declaration               shift and go to state 9
    var_declaration                shift and go to state 10
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 5

    (6) _1_items -> _1_item .
    CLASS           reduce using rule 6 (_1_items -> _1_item .)
    FUN             reduce using rule 6 (_1_items -> _1_item .)
    VAR             reduce using rule 6 (_1_items -> _1_item .)
    RETURN          reduce using rule 6 (_1_items -> _1_item .)
    FOR             reduce using rule 6 (_1_items -> _1_item .)
    WHILE           reduce using rule 6 (_1_items -> _1_item .)
    IF              reduce using rule 6 (_1_items -> _1_item .)
    PRINT           reduce using rule 6 (_1_items -> _1_item .)
    {               reduce using rule 6 (_1_items -> _1_item .)
    SUPER           reduce using rule 6 (_1_items -> _1_item .)
    THIS            reduce using rule 6 (_1_items -> _1_item .)
    IDENTIFIER      reduce using rule 6 (_1_items -> _1_item .)
    NIL             reduce using rule 6 (_1_items -> _1_item .)
    FALSE           reduce using rule 6 (_1_items -> _1_item .)
    TRUE            reduce using rule 6 (_1_items -> _1_item .)
    STRING          reduce using rule 6 (_1_items -> _1_item .)
    NUMBER          reduce using rule 6 (_1_items -> _1_item .)
    NOT             reduce using rule 6 (_1_items -> _1_item .)
    -               reduce using rule 6 (_1_items -> _1_item .)
    (               reduce using rule 6 (_1_items -> _1_item .)
    $end            reduce using rule 6 (_1_items -> _1_item .)
    }               reduce using rule 6 (_1_items -> _1_item .)


state 6

    (7) _1_item -> declaration .
    CLASS           reduce using rule 7 (_1_item -> declaration .)
    FUN             reduce using rule 7 (_1_item -> declaration .)
    VAR             reduce using rule 7 (_1_item -> declaration .)
    RETURN          reduce using rule 7 (_1_item -> declaration .)
    FOR             reduce using rule 7 (_1_item -> declaration .)
    WHILE           reduce using rule 7 (_1_item -> declaration .)
    IF              reduce using rule 7 (_1_item -> declaration .)
    PRINT           reduce using rule 7 (_1_item -> declaration .)
    {               reduce using rule 7 (_1_item -> declaration .)
    SUPER           reduce using rule 7 (_1_item -> declaration .)
    THIS            reduce using rule 7 (_1_item -> declaration .)
    IDENTIFIER      reduce using rule 7 (_1_item -> declaration .)
    NIL             reduce using rule 7 (_1_item -> declaration .)
    FALSE           reduce using rule 7 (_1_item -> declaration .)
    TRUE            reduce using rule 7 (_1_item -> declaration .)
    STRING          reduce using rule 7 (_1_item -> declaration .)
    NUMBER          reduce using rule 7 (_1_item -> declaration .)
    NOT             reduce using rule 7 (_1_item -> declaration .)
    -               reduce using rule 7 (_1_item -> declaration .)
    (               reduce using rule 7 (_1_item -> declaration .)
    $end            reduce using rule 7 (_1_item -> declaration .)
    }               reduce using rule 7 (_1_item -> declaration .)


state 7

    (8) declaration -> statement .
    CLASS           reduce using rule 8 (declaration -> statement .)
    FUN             reduce using rule 8 (declaration -> statement .)
    VAR             reduce using rule 8 (declaration -> statement .)
    RETURN          reduce using rule 8 (declaration -> statement .)
    FOR             reduce using rule 8 (declaration -> statement .)
    WHILE           reduce using rule 8 (declaration -> statement .)
    IF              reduce using rule 8 (declaration -> statement .)
    PRINT           reduce using rule 8 (declaration -> statement .)
    {               reduce using rule 8 (declaration -> statement .)
    SUPER           reduce using rule 8 (declaration -> statement .)
    THIS            reduce using rule 8 (declaration -> statement .)
    IDENTIFIER      reduce using rule 8 (declaration -> statement .)
    NIL             reduce using rule 8 (declaration -> statement .)
    FALSE           reduce using rule 8 (declaration -> statement .)
    TRUE            reduce using rule 8 (declaration -> statement .)
    STRING          reduce using rule 8 (declaration -> statement .)
    NUMBER          reduce using rule 8 (declaration -> statement .)
    NOT             reduce using rule 8 (declaration -> statement .)
    -               reduce using rule 8 (declaration -> statement .)
    (               reduce using rule 8 (declaration -> statement .)
    $end            reduce using rule 8 (declaration -> statement .)
    }               reduce using rule 8 (declaration -> statement .)


state 8

    (9) declaration -> class_declaration .
    CLASS           reduce using rule 9 (declaration -> class_declaration .)
    FUN             reduce using rule 9 (declaration -> class_declaration .)
    VAR             reduce using rule 9 (declaration -> class_declaration .)
    RETURN          reduce using rule 9 (declaration -> class_declaration .)
    FOR             reduce using rule 9 (declaration -> class_declaration .)
    WHILE           reduce using rule 9 (declaration -> class_declaration .)
    IF              reduce using rule 9 (declaration -> class_declaration .)
    PRINT           reduce using rule 9 (declaration -> class_declaration .)
    {               reduce using rule 9 (declaration -> class_declaration .)
    SUPER           reduce using rule 9 (declaration -> class_declaration .)
    THIS            reduce using rule 9 (declaration -> class_declaration .)
    IDENTIFIER      reduce using rule 9 (declaration -> class_declaration .)
    NIL             reduce using rule 9 (declaration -> class_declaration .)
    FALSE           reduce using rule 9 (declaration -> class_declaration .)
    TRUE            reduce using rule 9 (declaration -> class_declaration .)
    STRING          reduce using rule 9 (declaration -> class_declaration .)
    NUMBER          reduce using rule 9 (declaration -> class_declaration .)
    NOT             reduce using rule 9 (declaration -> class_declaration .)
    -               reduce using rule 9 (declaration -> class_declaration .)
    (               reduce using rule 9 (declaration -> class_declaration .)
    $end            reduce using rule 9 (declaration -> class_declaration .)
    }               reduce using rule 9 (declaration -> class_declaration .)


state 9

    (10) declaration -> func_declaration .
    CLASS           reduce using rule 10 (declaration -> func_declaration .)
    FUN             reduce using rule 10 (declaration -> func_declaration .)
    VAR             reduce using rule 10 (declaration -> func_declaration .)
    RETURN          reduce using rule 10 (declaration -> func_declaration .)
    FOR             reduce using rule 10 (declaration -> func_declaration .)
    WHILE           reduce using rule 10 (declaration -> func_declaration .)
    IF              reduce using rule 10 (declaration -> func_declaration .)
    PRINT           reduce using rule 10 (declaration -> func_declaration .)
    {               reduce using rule 10 (declaration -> func_declaration .)
    SUPER           reduce using rule 10 (declaration -> func_declaration .)
    THIS            reduce using rule 10 (declaration -> func_declaration .)
    IDENTIFIER      reduce using rule 10 (declaration -> func_declaration .)
    NIL             reduce using rule 10 (declaration -> func_declaration .)
    FALSE           reduce using rule 10 (declaration -> func_declaration .)
    TRUE            reduce using rule 10 (declaration -> func_declaration .)
    STRING          reduce using rule 10 (declaration -> func_declaration .)
    NUMBER          reduce using rule 10 (declaration -> func_declaration .)
    NOT             reduce using rule 10 (declaration -> func_declaration .)
    -               reduce using rule 10 (declaration -> func_declaration .)
    (               reduce using rule 10 (declaration -> func_declaration .)
    $end            reduce using rule 10 (declaration -> func_declaration .)
    }               reduce using rule 10 (declaration -> func_declaration .)


state 10

    (11) declaration -> var_declaration .
    CLASS           reduce using rule 11 (declaration -> var_declaration .)
    FUN             reduce using rule 11 (declaration -> var_declaration .)
    VAR             reduce using rule 11 (declaration -> var_declaration .)
    RETURN          reduce using rule 11 (declaration -> var_declaration .)
    FOR             reduce using rule 11 (declaration -> var_declaration .)
    WHILE           reduce using rule 11 (declaration -> var_declaration .)
    IF              reduce using rule 11 (declaration -> var_declaration .)
    PRINT           reduce using rule 11 (declaration -> var_declaration .)
    {               reduce using rule 11 (declaration -> var_declaration .)
    SUPER           reduce using rule 11 (declaration -> var_declaration .)
    THIS            reduce using rule 11 (declaration -> var_declaration .)
    IDENTIFIER      reduce using rule 11 (declaration -> var_declaration .)
    NIL             reduce using rule 11 (declaration -> var_declaration .)
    FALSE           reduce using rule 11 (declaration -> var_declaration .)
    TRUE            reduce using rule 11 (declaration -> var_declaration .)
    STRING          reduce using rule 11 (declaration -> var_declaration .)
    NUMBER          reduce using rule 11 (declaration -> var_declaration .)
    NOT             reduce using rule 11 (declaration -> var_declaration .)
    -               reduce using rule 11 (declaration -> var_declaration .)
    (               reduce using rule 11 (declaration -> var_declaration .)
    $end            reduce using rule 11 (declaration -> var_declaration .)
    }               reduce using rule 11 (declaration -> var_declaration .)


state 11

    (32) statement -> return_statement .
    CLASS           reduce using rule 32 (statement -> return_statement .)
    FUN             reduce using rule 32 (statement -> return_statement .)
    VAR             reduce using rule 32 (statement -> return_statement .)
    RETURN          reduce using rule 32 (statement -> return_statement .)
    FOR             reduce using rule 32 (statement -> return_statement .)
    WHILE           reduce using rule 32 (statement -> return_statement .)
    IF              reduce using rule 32 (statement -> return_statement .)
    PRINT           reduce using rule 32 (statement -> return_statement .)
    {               reduce using rule 32 (statement -> return_statement .)
    SUPER           reduce using rule 32 (statement -> return_statement .)
    THIS            reduce using rule 32 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 32 (statement -> return_statement .)
    NIL             reduce using rule 32 (statement -> return_statement .)
    FALSE           reduce using rule 32 (statement -> return_statement .)
    TRUE            reduce using rule 32 (statement -> return_statement .)
    STRING          reduce using rule 32 (statement -> return_statement .)
    NUMBER          reduce using rule 32 (statement -> return_statement .)
    NOT             reduce using rule 32 (statement -> return_statement .)
    -               reduce using rule 32 (statement -> return_statement .)
    (               reduce using rule 32 (statement -> return_statement .)
    $end            reduce using rule 32 (statement -> return_statement .)
    }               reduce using rule 32 (statement -> return_statement .)
    ELSE            reduce using rule 32 (statement -> return_statement .)


state 12

    (33) statement -> for_statement .
    CLASS           reduce using rule 33 (statement -> for_statement .)
    FUN             reduce using rule 33 (statement -> for_statement .)
    VAR             reduce using rule 33 (statement -> for_statement .)
    RETURN          reduce using rule 33 (statement -> for_statement .)
    FOR             reduce using rule 33 (statement -> for_statement .)
    WHILE           reduce using rule 33 (statement -> for_statement .)
    IF              reduce using rule 33 (statement -> for_statement .)
    PRINT           reduce using rule 33 (statement -> for_statement .)
    {               reduce using rule 33 (statement -> for_statement .)
    SUPER           reduce using rule 33 (statement -> for_statement .)
    THIS            reduce using rule 33 (statement -> for_statement .)
    IDENTIFIER      reduce using rule 33 (statement -> for_statement .)
    NIL             reduce using rule 33 (statement -> for_statement .)
    FALSE           reduce using rule 33 (statement -> for_statement .)
    TRUE            reduce using rule 33 (statement -> for_statement .)
    STRING          reduce using rule 33 (statement -> for_statement .)
    NUMBER          reduce using rule 33 (statement -> for_statement .)
    NOT             reduce using rule 33 (statement -> for_statement .)
    -               reduce using rule 33 (statement -> for_statement .)
    (               reduce using rule 33 (statement -> for_statement .)
    $end            reduce using rule 33 (statement -> for_statement .)
    }               reduce using rule 33 (statement -> for_statement .)
    ELSE            reduce using rule 33 (statement -> for_statement .)


state 13

    (34) statement -> while_statement .
    CLASS           reduce using rule 34 (statement -> while_statement .)
    FUN             reduce using rule 34 (statement -> while_statement .)
    VAR             reduce using rule 34 (statement -> while_statement .)
    RETURN          reduce using rule 34 (statement -> while_statement .)
    FOR             reduce using rule 34 (statement -> while_statement .)
    WHILE           reduce using rule 34 (statement -> while_statement .)
    IF              reduce using rule 34 (statement -> while_statement .)
    PRINT           reduce using rule 34 (statement -> while_statement .)
    {               reduce using rule 34 (statement -> while_statement .)
    SUPER           reduce using rule 34 (statement -> while_statement .)
    THIS            reduce using rule 34 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 34 (statement -> while_statement .)
    NIL             reduce using rule 34 (statement -> while_statement .)
    FALSE           reduce using rule 34 (statement -> while_statement .)
    TRUE            reduce using rule 34 (statement -> while_statement .)
    STRING          reduce using rule 34 (statement -> while_statement .)
    NUMBER          reduce using rule 34 (statement -> while_statement .)
    NOT             reduce using rule 34 (statement -> while_statement .)
    -               reduce using rule 34 (statement -> while_statement .)
    (               reduce using rule 34 (statement -> while_statement .)
    $end            reduce using rule 34 (statement -> while_statement .)
    }               reduce using rule 34 (statement -> while_statement .)
    ELSE            reduce using rule 34 (statement -> while_statement .)


state 14

    (35) statement -> if_statement .
    CLASS           reduce using rule 35 (statement -> if_statement .)
    FUN             reduce using rule 35 (statement -> if_statement .)
    VAR             reduce using rule 35 (statement -> if_statement .)
    RETURN          reduce using rule 35 (statement -> if_statement .)
    FOR             reduce using rule 35 (statement -> if_statement .)
    WHILE           reduce using rule 35 (statement -> if_statement .)
    IF              reduce using rule 35 (statement -> if_statement .)
    PRINT           reduce using rule 35 (statement -> if_statement .)
    {               reduce using rule 35 (statement -> if_statement .)
    SUPER           reduce using rule 35 (statement -> if_statement .)
    THIS            reduce using rule 35 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 35 (statement -> if_statement .)
    NIL             reduce using rule 35 (statement -> if_statement .)
    FALSE           reduce using rule 35 (statement -> if_statement .)
    TRUE            reduce using rule 35 (statement -> if_statement .)
    STRING          reduce using rule 35 (statement -> if_statement .)
    NUMBER          reduce using rule 35 (statement -> if_statement .)
    NOT             reduce using rule 35 (statement -> if_statement .)
    -               reduce using rule 35 (statement -> if_statement .)
    (               reduce using rule 35 (statement -> if_statement .)
    $end            reduce using rule 35 (statement -> if_statement .)
    }               reduce using rule 35 (statement -> if_statement .)
    ELSE            reduce using rule 35 (statement -> if_statement .)


state 15

    (36) statement -> print_statement .
    CLASS           reduce using rule 36 (statement -> print_statement .)
    FUN             reduce using rule 36 (statement -> print_statement .)
    VAR             reduce using rule 36 (statement -> print_statement .)
    RETURN          reduce using rule 36 (statement -> print_statement .)
    FOR             reduce using rule 36 (statement -> print_statement .)
    WHILE           reduce using rule 36 (statement -> print_statement .)
    IF              reduce using rule 36 (statement -> print_statement .)
    PRINT           reduce using rule 36 (statement -> print_statement .)
    {               reduce using rule 36 (statement -> print_statement .)
    SUPER           reduce using rule 36 (statement -> print_statement .)
    THIS            reduce using rule 36 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 36 (statement -> print_statement .)
    NIL             reduce using rule 36 (statement -> print_statement .)
    FALSE           reduce using rule 36 (statement -> print_statement .)
    TRUE            reduce using rule 36 (statement -> print_statement .)
    STRING          reduce using rule 36 (statement -> print_statement .)
    NUMBER          reduce using rule 36 (statement -> print_statement .)
    NOT             reduce using rule 36 (statement -> print_statement .)
    -               reduce using rule 36 (statement -> print_statement .)
    (               reduce using rule 36 (statement -> print_statement .)
    $end            reduce using rule 36 (statement -> print_statement .)
    }               reduce using rule 36 (statement -> print_statement .)
    ELSE            reduce using rule 36 (statement -> print_statement .)


state 16

    (37) statement -> expression_statement .
    CLASS           reduce using rule 37 (statement -> expression_statement .)
    FUN             reduce using rule 37 (statement -> expression_statement .)
    VAR             reduce using rule 37 (statement -> expression_statement .)
    RETURN          reduce using rule 37 (statement -> expression_statement .)
    FOR             reduce using rule 37 (statement -> expression_statement .)
    WHILE           reduce using rule 37 (statement -> expression_statement .)
    IF              reduce using rule 37 (statement -> expression_statement .)
    PRINT           reduce using rule 37 (statement -> expression_statement .)
    {               reduce using rule 37 (statement -> expression_statement .)
    SUPER           reduce using rule 37 (statement -> expression_statement .)
    THIS            reduce using rule 37 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 37 (statement -> expression_statement .)
    NIL             reduce using rule 37 (statement -> expression_statement .)
    FALSE           reduce using rule 37 (statement -> expression_statement .)
    TRUE            reduce using rule 37 (statement -> expression_statement .)
    STRING          reduce using rule 37 (statement -> expression_statement .)
    NUMBER          reduce using rule 37 (statement -> expression_statement .)
    NOT             reduce using rule 37 (statement -> expression_statement .)
    -               reduce using rule 37 (statement -> expression_statement .)
    (               reduce using rule 37 (statement -> expression_statement .)
    $end            reduce using rule 37 (statement -> expression_statement .)
    }               reduce using rule 37 (statement -> expression_statement .)
    ELSE            reduce using rule 37 (statement -> expression_statement .)


state 17

    (38) statement -> statement_block .
    CLASS           reduce using rule 38 (statement -> statement_block .)
    FUN             reduce using rule 38 (statement -> statement_block .)
    VAR             reduce using rule 38 (statement -> statement_block .)
    RETURN          reduce using rule 38 (statement -> statement_block .)
    FOR             reduce using rule 38 (statement -> statement_block .)
    WHILE           reduce using rule 38 (statement -> statement_block .)
    IF              reduce using rule 38 (statement -> statement_block .)
    PRINT           reduce using rule 38 (statement -> statement_block .)
    {               reduce using rule 38 (statement -> statement_block .)
    SUPER           reduce using rule 38 (statement -> statement_block .)
    THIS            reduce using rule 38 (statement -> statement_block .)
    IDENTIFIER      reduce using rule 38 (statement -> statement_block .)
    NIL             reduce using rule 38 (statement -> statement_block .)
    FALSE           reduce using rule 38 (statement -> statement_block .)
    TRUE            reduce using rule 38 (statement -> statement_block .)
    STRING          reduce using rule 38 (statement -> statement_block .)
    NUMBER          reduce using rule 38 (statement -> statement_block .)
    NOT             reduce using rule 38 (statement -> statement_block .)
    -               reduce using rule 38 (statement -> statement_block .)
    (               reduce using rule 38 (statement -> statement_block .)
    $end            reduce using rule 38 (statement -> statement_block .)
    }               reduce using rule 38 (statement -> statement_block .)
    ELSE            reduce using rule 38 (statement -> statement_block .)


state 18

    (24) class_declaration -> CLASS . IDENTIFIER _4_optional { _5_repeat }
    IDENTIFIER      shift and go to state 41


state 19

    (78) factor -> IDENTIFIER .
    (               reduce using rule 78 (factor -> IDENTIFIER .)
    .               reduce using rule 78 (factor -> IDENTIFIER .)
    ;               reduce using rule 78 (factor -> IDENTIFIER .)
    NE              reduce using rule 78 (factor -> IDENTIFIER .)
    EQ              reduce using rule 78 (factor -> IDENTIFIER .)
    GE              reduce using rule 78 (factor -> IDENTIFIER .)
    GT              reduce using rule 78 (factor -> IDENTIFIER .)
    LE              reduce using rule 78 (factor -> IDENTIFIER .)
    LT              reduce using rule 78 (factor -> IDENTIFIER .)
    /               reduce using rule 78 (factor -> IDENTIFIER .)
    *               reduce using rule 78 (factor -> IDENTIFIER .)
    -               reduce using rule 78 (factor -> IDENTIFIER .)
    +               reduce using rule 78 (factor -> IDENTIFIER .)
    AND             reduce using rule 78 (factor -> IDENTIFIER .)
    OR              reduce using rule 78 (factor -> IDENTIFIER .)
    =               reduce using rule 78 (factor -> IDENTIFIER .)
    )               reduce using rule 78 (factor -> IDENTIFIER .)
    ,               reduce using rule 78 (factor -> IDENTIFIER .)


state 20

    (39) statement_block -> { . declarations }
    (2) declarations -> . _1_repeat
    (3) _1_repeat -> . _1_items
    (4) _1_repeat -> .
    (5) _1_items -> . _1_items _1_item
    (6) _1_items -> . _1_item
    (7) _1_item -> . declaration
    (8) declaration -> . statement
    (9) declaration -> . class_declaration
    (10) declaration -> . func_declaration
    (11) declaration -> . var_declaration
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (24) class_declaration -> . CLASS IDENTIFIER _4_optional { _5_repeat }
    (15) func_declaration -> . FUN function
    (12) var_declaration -> . VAR IDENTIFIER _2_optional ;
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    }               reduce using rule 4 (_1_repeat -> .)
    CLASS           shift and go to state 18
    FUN             shift and go to state 21
    VAR             shift and go to state 22
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    declarations                   shift and go to state 42
    _1_repeat                      shift and go to state 3
    _1_items                       shift and go to state 4
    _1_item                        shift and go to state 5
    declaration                    shift and go to state 6
    statement                      shift and go to state 7
    class_declaration              shift and go to state 8
    func_declaration               shift and go to state 9
    var_declaration                shift and go to state 10
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 21

    (15) func_declaration -> FUN . function
    (16) function -> . IDENTIFIER ( ) statement_block
    (17) function -> . IDENTIFIER ( parameters ) statement_block
    IDENTIFIER      shift and go to state 44

    function                       shift and go to state 43

state 22

    (12) var_declaration -> VAR . IDENTIFIER _2_optional ;
    IDENTIFIER      shift and go to state 45


state 23

    (58) return_statement -> RETURN . expression ;
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 46
    factor                         shift and go to state 30

state 24

    (40) expression_statement -> expression . ;
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               shift and go to state 47
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 25

    (46) for_statement -> FOR . ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> FOR . ( for_initializer _9_optional ; _10_optional ) statement
    (               shift and go to state 61


state 26

    (86) factor -> ( . expression )
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 62
    factor                         shift and go to state 30

state 27

    (45) while_statement -> WHILE . ( expression ) statement
    (               shift and go to state 63


state 28

    (42) if_statement -> IF . ( expression ) statement _6_optional
    (               shift and go to state 64


state 29

    (41) print_statement -> PRINT . expression ;
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 65
    factor                         shift and go to state 30

state 30

    (59) expression -> factor .
    (73) factor -> factor . ( )
    (74) factor -> factor . ( arguments )
    (75) factor -> factor . . IDENTIFIER
    ;               reduce using rule 59 (expression -> factor .)
    NE              reduce using rule 59 (expression -> factor .)
    EQ              reduce using rule 59 (expression -> factor .)
    GE              reduce using rule 59 (expression -> factor .)
    GT              reduce using rule 59 (expression -> factor .)
    LE              reduce using rule 59 (expression -> factor .)
    LT              reduce using rule 59 (expression -> factor .)
    /               reduce using rule 59 (expression -> factor .)
    *               reduce using rule 59 (expression -> factor .)
    -               reduce using rule 59 (expression -> factor .)
    +               reduce using rule 59 (expression -> factor .)
    AND             reduce using rule 59 (expression -> factor .)
    OR              reduce using rule 59 (expression -> factor .)
    =               reduce using rule 59 (expression -> factor .)
    )               reduce using rule 59 (expression -> factor .)
    ,               reduce using rule 59 (expression -> factor .)
    (               shift and go to state 66
    .               shift and go to state 67


state 31

    (85) factor -> - . factor
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    factor                         shift and go to state 68

state 32

    (76) factor -> SUPER . . IDENTIFIER
    .               shift and go to state 69


state 33

    (77) factor -> THIS .
    (               reduce using rule 77 (factor -> THIS .)
    .               reduce using rule 77 (factor -> THIS .)
    ;               reduce using rule 77 (factor -> THIS .)
    NE              reduce using rule 77 (factor -> THIS .)
    EQ              reduce using rule 77 (factor -> THIS .)
    GE              reduce using rule 77 (factor -> THIS .)
    GT              reduce using rule 77 (factor -> THIS .)
    LE              reduce using rule 77 (factor -> THIS .)
    LT              reduce using rule 77 (factor -> THIS .)
    /               reduce using rule 77 (factor -> THIS .)
    *               reduce using rule 77 (factor -> THIS .)
    -               reduce using rule 77 (factor -> THIS .)
    +               reduce using rule 77 (factor -> THIS .)
    AND             reduce using rule 77 (factor -> THIS .)
    OR              reduce using rule 77 (factor -> THIS .)
    =               reduce using rule 77 (factor -> THIS .)
    )               reduce using rule 77 (factor -> THIS .)
    ,               reduce using rule 77 (factor -> THIS .)


state 34

    (79) factor -> NIL .
    (               reduce using rule 79 (factor -> NIL .)
    .               reduce using rule 79 (factor -> NIL .)
    ;               reduce using rule 79 (factor -> NIL .)
    NE              reduce using rule 79 (factor -> NIL .)
    EQ              reduce using rule 79 (factor -> NIL .)
    GE              reduce using rule 79 (factor -> NIL .)
    GT              reduce using rule 79 (factor -> NIL .)
    LE              reduce using rule 79 (factor -> NIL .)
    LT              reduce using rule 79 (factor -> NIL .)
    /               reduce using rule 79 (factor -> NIL .)
    *               reduce using rule 79 (factor -> NIL .)
    -               reduce using rule 79 (factor -> NIL .)
    +               reduce using rule 79 (factor -> NIL .)
    AND             reduce using rule 79 (factor -> NIL .)
    OR              reduce using rule 79 (factor -> NIL .)
    =               reduce using rule 79 (factor -> NIL .)
    )               reduce using rule 79 (factor -> NIL .)
    ,               reduce using rule 79 (factor -> NIL .)


state 35

    (80) factor -> FALSE .
    (               reduce using rule 80 (factor -> FALSE .)
    .               reduce using rule 80 (factor -> FALSE .)
    ;               reduce using rule 80 (factor -> FALSE .)
    NE              reduce using rule 80 (factor -> FALSE .)
    EQ              reduce using rule 80 (factor -> FALSE .)
    GE              reduce using rule 80 (factor -> FALSE .)
    GT              reduce using rule 80 (factor -> FALSE .)
    LE              reduce using rule 80 (factor -> FALSE .)
    LT              reduce using rule 80 (factor -> FALSE .)
    /               reduce using rule 80 (factor -> FALSE .)
    *               reduce using rule 80 (factor -> FALSE .)
    -               reduce using rule 80 (factor -> FALSE .)
    +               reduce using rule 80 (factor -> FALSE .)
    AND             reduce using rule 80 (factor -> FALSE .)
    OR              reduce using rule 80 (factor -> FALSE .)
    =               reduce using rule 80 (factor -> FALSE .)
    )               reduce using rule 80 (factor -> FALSE .)
    ,               reduce using rule 80 (factor -> FALSE .)


state 36

    (81) factor -> TRUE .
    (               reduce using rule 81 (factor -> TRUE .)
    .               reduce using rule 81 (factor -> TRUE .)
    ;               reduce using rule 81 (factor -> TRUE .)
    NE              reduce using rule 81 (factor -> TRUE .)
    EQ              reduce using rule 81 (factor -> TRUE .)
    GE              reduce using rule 81 (factor -> TRUE .)
    GT              reduce using rule 81 (factor -> TRUE .)
    LE              reduce using rule 81 (factor -> TRUE .)
    LT              reduce using rule 81 (factor -> TRUE .)
    /               reduce using rule 81 (factor -> TRUE .)
    *               reduce using rule 81 (factor -> TRUE .)
    -               reduce using rule 81 (factor -> TRUE .)
    +               reduce using rule 81 (factor -> TRUE .)
    AND             reduce using rule 81 (factor -> TRUE .)
    OR              reduce using rule 81 (factor -> TRUE .)
    =               reduce using rule 81 (factor -> TRUE .)
    )               reduce using rule 81 (factor -> TRUE .)
    ,               reduce using rule 81 (factor -> TRUE .)


state 37

    (82) factor -> STRING .
    (               reduce using rule 82 (factor -> STRING .)
    .               reduce using rule 82 (factor -> STRING .)
    ;               reduce using rule 82 (factor -> STRING .)
    NE              reduce using rule 82 (factor -> STRING .)
    EQ              reduce using rule 82 (factor -> STRING .)
    GE              reduce using rule 82 (factor -> STRING .)
    GT              reduce using rule 82 (factor -> STRING .)
    LE              reduce using rule 82 (factor -> STRING .)
    LT              reduce using rule 82 (factor -> STRING .)
    /               reduce using rule 82 (factor -> STRING .)
    *               reduce using rule 82 (factor -> STRING .)
    -               reduce using rule 82 (factor -> STRING .)
    +               reduce using rule 82 (factor -> STRING .)
    AND             reduce using rule 82 (factor -> STRING .)
    OR              reduce using rule 82 (factor -> STRING .)
    =               reduce using rule 82 (factor -> STRING .)
    )               reduce using rule 82 (factor -> STRING .)
    ,               reduce using rule 82 (factor -> STRING .)


state 38

    (83) factor -> NUMBER .
    (               reduce using rule 83 (factor -> NUMBER .)
    .               reduce using rule 83 (factor -> NUMBER .)
    ;               reduce using rule 83 (factor -> NUMBER .)
    NE              reduce using rule 83 (factor -> NUMBER .)
    EQ              reduce using rule 83 (factor -> NUMBER .)
    GE              reduce using rule 83 (factor -> NUMBER .)
    GT              reduce using rule 83 (factor -> NUMBER .)
    LE              reduce using rule 83 (factor -> NUMBER .)
    LT              reduce using rule 83 (factor -> NUMBER .)
    /               reduce using rule 83 (factor -> NUMBER .)
    *               reduce using rule 83 (factor -> NUMBER .)
    -               reduce using rule 83 (factor -> NUMBER .)
    +               reduce using rule 83 (factor -> NUMBER .)
    AND             reduce using rule 83 (factor -> NUMBER .)
    OR              reduce using rule 83 (factor -> NUMBER .)
    =               reduce using rule 83 (factor -> NUMBER .)
    )               reduce using rule 83 (factor -> NUMBER .)
    ,               reduce using rule 83 (factor -> NUMBER .)


state 39

    (84) factor -> NOT . factor
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    factor                         shift and go to state 70

state 40

    (5) _1_items -> _1_items _1_item .
    CLASS           reduce using rule 5 (_1_items -> _1_items _1_item .)
    FUN             reduce using rule 5 (_1_items -> _1_items _1_item .)
    VAR             reduce using rule 5 (_1_items -> _1_items _1_item .)
    RETURN          reduce using rule 5 (_1_items -> _1_items _1_item .)
    FOR             reduce using rule 5 (_1_items -> _1_items _1_item .)
    WHILE           reduce using rule 5 (_1_items -> _1_items _1_item .)
    IF              reduce using rule 5 (_1_items -> _1_items _1_item .)
    PRINT           reduce using rule 5 (_1_items -> _1_items _1_item .)
    {               reduce using rule 5 (_1_items -> _1_items _1_item .)
    SUPER           reduce using rule 5 (_1_items -> _1_items _1_item .)
    THIS            reduce using rule 5 (_1_items -> _1_items _1_item .)
    IDENTIFIER      reduce using rule 5 (_1_items -> _1_items _1_item .)
    NIL             reduce using rule 5 (_1_items -> _1_items _1_item .)
    FALSE           reduce using rule 5 (_1_items -> _1_items _1_item .)
    TRUE            reduce using rule 5 (_1_items -> _1_items _1_item .)
    STRING          reduce using rule 5 (_1_items -> _1_items _1_item .)
    NUMBER          reduce using rule 5 (_1_items -> _1_items _1_item .)
    NOT             reduce using rule 5 (_1_items -> _1_items _1_item .)
    -               reduce using rule 5 (_1_items -> _1_items _1_item .)
    (               reduce using rule 5 (_1_items -> _1_items _1_item .)
    $end            reduce using rule 5 (_1_items -> _1_items _1_item .)
    }               reduce using rule 5 (_1_items -> _1_items _1_item .)


state 41

    (24) class_declaration -> CLASS IDENTIFIER . _4_optional { _5_repeat }
    (25) _4_optional -> . LT IDENTIFIER
    (26) _4_optional -> .
    LT              shift and go to state 72
    {               reduce using rule 26 (_4_optional -> .)

    _4_optional                    shift and go to state 71

state 42

    (39) statement_block -> { declarations . }
    }               shift and go to state 73


state 43

    (15) func_declaration -> FUN function .
    CLASS           reduce using rule 15 (func_declaration -> FUN function .)
    FUN             reduce using rule 15 (func_declaration -> FUN function .)
    VAR             reduce using rule 15 (func_declaration -> FUN function .)
    RETURN          reduce using rule 15 (func_declaration -> FUN function .)
    FOR             reduce using rule 15 (func_declaration -> FUN function .)
    WHILE           reduce using rule 15 (func_declaration -> FUN function .)
    IF              reduce using rule 15 (func_declaration -> FUN function .)
    PRINT           reduce using rule 15 (func_declaration -> FUN function .)
    {               reduce using rule 15 (func_declaration -> FUN function .)
    SUPER           reduce using rule 15 (func_declaration -> FUN function .)
    THIS            reduce using rule 15 (func_declaration -> FUN function .)
    IDENTIFIER      reduce using rule 15 (func_declaration -> FUN function .)
    NIL             reduce using rule 15 (func_declaration -> FUN function .)
    FALSE           reduce using rule 15 (func_declaration -> FUN function .)
    TRUE            reduce using rule 15 (func_declaration -> FUN function .)
    STRING          reduce using rule 15 (func_declaration -> FUN function .)
    NUMBER          reduce using rule 15 (func_declaration -> FUN function .)
    NOT             reduce using rule 15 (func_declaration -> FUN function .)
    -               reduce using rule 15 (func_declaration -> FUN function .)
    (               reduce using rule 15 (func_declaration -> FUN function .)
    $end            reduce using rule 15 (func_declaration -> FUN function .)
    }               reduce using rule 15 (func_declaration -> FUN function .)


state 44

    (16) function -> IDENTIFIER . ( ) statement_block
    (17) function -> IDENTIFIER . ( parameters ) statement_block
    (               shift and go to state 74


state 45

    (12) var_declaration -> VAR IDENTIFIER . _2_optional ;
    (13) _2_optional -> . = expression
    (14) _2_optional -> .
    =               shift and go to state 76
    ;               reduce using rule 14 (_2_optional -> .)

    _2_optional                    shift and go to state 75

state 46

    (58) return_statement -> RETURN expression . ;
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               shift and go to state 77
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 47

    (40) expression_statement -> expression ; .
    CLASS           reduce using rule 40 (expression_statement -> expression ; .)
    FUN             reduce using rule 40 (expression_statement -> expression ; .)
    VAR             reduce using rule 40 (expression_statement -> expression ; .)
    RETURN          reduce using rule 40 (expression_statement -> expression ; .)
    FOR             reduce using rule 40 (expression_statement -> expression ; .)
    WHILE           reduce using rule 40 (expression_statement -> expression ; .)
    IF              reduce using rule 40 (expression_statement -> expression ; .)
    PRINT           reduce using rule 40 (expression_statement -> expression ; .)
    {               reduce using rule 40 (expression_statement -> expression ; .)
    SUPER           reduce using rule 40 (expression_statement -> expression ; .)
    THIS            reduce using rule 40 (expression_statement -> expression ; .)
    IDENTIFIER      reduce using rule 40 (expression_statement -> expression ; .)
    NIL             reduce using rule 40 (expression_statement -> expression ; .)
    FALSE           reduce using rule 40 (expression_statement -> expression ; .)
    TRUE            reduce using rule 40 (expression_statement -> expression ; .)
    STRING          reduce using rule 40 (expression_statement -> expression ; .)
    NUMBER          reduce using rule 40 (expression_statement -> expression ; .)
    NOT             reduce using rule 40 (expression_statement -> expression ; .)
    -               reduce using rule 40 (expression_statement -> expression ; .)
    (               reduce using rule 40 (expression_statement -> expression ; .)
    $end            reduce using rule 40 (expression_statement -> expression ; .)
    }               reduce using rule 40 (expression_statement -> expression ; .)
    ;               reduce using rule 40 (expression_statement -> expression ; .)
    ELSE            reduce using rule 40 (expression_statement -> expression ; .)


state 48

    (60) expression -> expression NE . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 78
    factor                         shift and go to state 30

state 49

    (61) expression -> expression EQ . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 79
    factor                         shift and go to state 30

state 50

    (62) expression -> expression GE . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 80
    factor                         shift and go to state 30

state 51

    (63) expression -> expression GT . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 81
    factor                         shift and go to state 30

state 52

    (64) expression -> expression LE . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 82
    factor                         shift and go to state 30

state 53

    (65) expression -> expression LT . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 83
    factor                         shift and go to state 30

state 54

    (66) expression -> expression / . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 84
    factor                         shift and go to state 30

state 55

    (67) expression -> expression * . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 85
    factor                         shift and go to state 30

state 56

    (68) expression -> expression - . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 86
    factor                         shift and go to state 30

state 57

    (69) expression -> expression + . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 87
    factor                         shift and go to state 30

state 58

    (70) expression -> expression AND . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 88
    factor                         shift and go to state 30

state 59

    (71) expression -> expression OR . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 89
    factor                         shift and go to state 30

state 60

    (72) expression -> expression = . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 90
    factor                         shift and go to state 30

state 61

    (46) for_statement -> FOR ( . ; _7_optional ; _8_optional ) statement
    (51) for_statement -> FOR ( . for_initializer _9_optional ; _10_optional ) statement
    (56) for_initializer -> . expression_statement
    (57) for_initializer -> . var_declaration
    (40) expression_statement -> . expression ;
    (12) var_declaration -> . VAR IDENTIFIER _2_optional ;
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    ;               shift and go to state 91
    VAR             shift and go to state 22
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    for_initializer                shift and go to state 92
    expression_statement           shift and go to state 93
    var_declaration                shift and go to state 94
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 62

    (86) factor -> ( expression . )
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    )               shift and go to state 95
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 63

    (45) while_statement -> WHILE ( . expression ) statement
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 96
    factor                         shift and go to state 30

state 64

    (42) if_statement -> IF ( . expression ) statement _6_optional
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 97
    factor                         shift and go to state 30

state 65

    (41) print_statement -> PRINT expression . ;
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               shift and go to state 98
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 66

    (73) factor -> factor ( . )
    (74) factor -> factor ( . arguments )
    (87) arguments -> . expression _11_repeat
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    )               shift and go to state 99
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    factor                         shift and go to state 30
    arguments                      shift and go to state 100
    expression                     shift and go to state 101

state 67

    (75) factor -> factor . . IDENTIFIER
    IDENTIFIER      shift and go to state 102


state 68

    (85) factor -> - factor .
    (73) factor -> factor . ( )
    (74) factor -> factor . ( arguments )
    (75) factor -> factor . . IDENTIFIER
    (               reduce using rule 85 (factor -> - factor .)
    .               reduce using rule 85 (factor -> - factor .)
    ;               reduce using rule 85 (factor -> - factor .)
    NE              reduce using rule 85 (factor -> - factor .)
    EQ              reduce using rule 85 (factor -> - factor .)
    GE              reduce using rule 85 (factor -> - factor .)
    GT              reduce using rule 85 (factor -> - factor .)
    LE              reduce using rule 85 (factor -> - factor .)
    LT              reduce using rule 85 (factor -> - factor .)
    /               reduce using rule 85 (factor -> - factor .)
    *               reduce using rule 85 (factor -> - factor .)
    -               reduce using rule 85 (factor -> - factor .)
    +               reduce using rule 85 (factor -> - factor .)
    AND             reduce using rule 85 (factor -> - factor .)
    OR              reduce using rule 85 (factor -> - factor .)
    =               reduce using rule 85 (factor -> - factor .)
    )               reduce using rule 85 (factor -> - factor .)
    ,               reduce using rule 85 (factor -> - factor .)


state 69

    (76) factor -> SUPER . . IDENTIFIER
    IDENTIFIER      shift and go to state 103


state 70

    (84) factor -> NOT factor .
    (73) factor -> factor . ( )
    (74) factor -> factor . ( arguments )
    (75) factor -> factor . . IDENTIFIER
    (               reduce using rule 84 (factor -> NOT factor .)
    .               reduce using rule 84 (factor -> NOT factor .)
    ;               reduce using rule 84 (factor -> NOT factor .)
    NE              reduce using rule 84 (factor -> NOT factor .)
    EQ              reduce using rule 84 (factor -> NOT factor .)
    GE              reduce using rule 84 (factor -> NOT factor .)
    GT              reduce using rule 84 (factor -> NOT factor .)
    LE              reduce using rule 84 (factor -> NOT factor .)
    LT              reduce using rule 84 (factor -> NOT factor .)
    /               reduce using rule 84 (factor -> NOT factor .)
    *               reduce using rule 84 (factor -> NOT factor .)
    -               reduce using rule 84 (factor -> NOT factor .)
    +               reduce using rule 84 (factor -> NOT factor .)
    AND             reduce using rule 84 (factor -> NOT factor .)
    OR              reduce using rule 84 (factor -> NOT factor .)
    =               reduce using rule 84 (factor -> NOT factor .)
    )               reduce using rule 84 (factor -> NOT factor .)
    ,               reduce using rule 84 (factor -> NOT factor .)


state 71

    (24) class_declaration -> CLASS IDENTIFIER _4_optional . { _5_repeat }
    {               shift and go to state 104


state 72

    (25) _4_optional -> LT . IDENTIFIER
    IDENTIFIER      shift and go to state 105


state 73

    (39) statement_block -> { declarations } .
    CLASS           reduce using rule 39 (statement_block -> { declarations } .)
    FUN             reduce using rule 39 (statement_block -> { declarations } .)
    VAR             reduce using rule 39 (statement_block -> { declarations } .)
    RETURN          reduce using rule 39 (statement_block -> { declarations } .)
    FOR             reduce using rule 39 (statement_block -> { declarations } .)
    WHILE           reduce using rule 39 (statement_block -> { declarations } .)
    IF              reduce using rule 39 (statement_block -> { declarations } .)
    PRINT           reduce using rule 39 (statement_block -> { declarations } .)
    {               reduce using rule 39 (statement_block -> { declarations } .)
    SUPER           reduce using rule 39 (statement_block -> { declarations } .)
    THIS            reduce using rule 39 (statement_block -> { declarations } .)
    IDENTIFIER      reduce using rule 39 (statement_block -> { declarations } .)
    NIL             reduce using rule 39 (statement_block -> { declarations } .)
    FALSE           reduce using rule 39 (statement_block -> { declarations } .)
    TRUE            reduce using rule 39 (statement_block -> { declarations } .)
    STRING          reduce using rule 39 (statement_block -> { declarations } .)
    NUMBER          reduce using rule 39 (statement_block -> { declarations } .)
    NOT             reduce using rule 39 (statement_block -> { declarations } .)
    -               reduce using rule 39 (statement_block -> { declarations } .)
    (               reduce using rule 39 (statement_block -> { declarations } .)
    $end            reduce using rule 39 (statement_block -> { declarations } .)
    }               reduce using rule 39 (statement_block -> { declarations } .)
    ELSE            reduce using rule 39 (statement_block -> { declarations } .)


state 74

    (16) function -> IDENTIFIER ( . ) statement_block
    (17) function -> IDENTIFIER ( . parameters ) statement_block
    (18) parameters -> . IDENTIFIER _3_repeat
    )               shift and go to state 107
    IDENTIFIER      shift and go to state 106

    parameters                     shift and go to state 108

state 75

    (12) var_declaration -> VAR IDENTIFIER _2_optional . ;
    ;               shift and go to state 109


state 76

    (13) _2_optional -> = . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 110
    factor                         shift and go to state 30

state 77

    (58) return_statement -> RETURN expression ; .
    CLASS           reduce using rule 58 (return_statement -> RETURN expression ; .)
    FUN             reduce using rule 58 (return_statement -> RETURN expression ; .)
    VAR             reduce using rule 58 (return_statement -> RETURN expression ; .)
    RETURN          reduce using rule 58 (return_statement -> RETURN expression ; .)
    FOR             reduce using rule 58 (return_statement -> RETURN expression ; .)
    WHILE           reduce using rule 58 (return_statement -> RETURN expression ; .)
    IF              reduce using rule 58 (return_statement -> RETURN expression ; .)
    PRINT           reduce using rule 58 (return_statement -> RETURN expression ; .)
    {               reduce using rule 58 (return_statement -> RETURN expression ; .)
    SUPER           reduce using rule 58 (return_statement -> RETURN expression ; .)
    THIS            reduce using rule 58 (return_statement -> RETURN expression ; .)
    IDENTIFIER      reduce using rule 58 (return_statement -> RETURN expression ; .)
    NIL             reduce using rule 58 (return_statement -> RETURN expression ; .)
    FALSE           reduce using rule 58 (return_statement -> RETURN expression ; .)
    TRUE            reduce using rule 58 (return_statement -> RETURN expression ; .)
    STRING          reduce using rule 58 (return_statement -> RETURN expression ; .)
    NUMBER          reduce using rule 58 (return_statement -> RETURN expression ; .)
    NOT             reduce using rule 58 (return_statement -> RETURN expression ; .)
    -               reduce using rule 58 (return_statement -> RETURN expression ; .)
    (               reduce using rule 58 (return_statement -> RETURN expression ; .)
    $end            reduce using rule 58 (return_statement -> RETURN expression ; .)
    }               reduce using rule 58 (return_statement -> RETURN expression ; .)
    ELSE            reduce using rule 58 (return_statement -> RETURN expression ; .)


state 78

    (60) expression -> expression NE expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 60 (expression -> expression NE expression .)
    NE              reduce using rule 60 (expression -> expression NE expression .)
    EQ              reduce using rule 60 (expression -> expression NE expression .)
    AND             reduce using rule 60 (expression -> expression NE expression .)
    OR              reduce using rule 60 (expression -> expression NE expression .)
    =               reduce using rule 60 (expression -> expression NE expression .)
    )               reduce using rule 60 (expression -> expression NE expression .)
    ,               reduce using rule 60 (expression -> expression NE expression .)
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 79

    (61) expression -> expression EQ expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 61 (expression -> expression EQ expression .)
    NE              reduce using rule 61 (expression -> expression EQ expression .)
    EQ              reduce using rule 61 (expression -> expression EQ expression .)
    AND             reduce using rule 61 (expression -> expression EQ expression .)
    OR              reduce using rule 61 (expression -> expression EQ expression .)
    =               reduce using rule 61 (expression -> expression EQ expression .)
    )               reduce using rule 61 (expression -> expression EQ expression .)
    ,               reduce using rule 61 (expression -> expression EQ expression .)
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 80

    (62) expression -> expression GE expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 62 (expression -> expression GE expression .)
    NE              reduce using rule 62 (expression -> expression GE expression .)
    EQ              reduce using rule 62 (expression -> expression GE expression .)
    GE              reduce using rule 62 (expression -> expression GE expression .)
    GT              reduce using rule 62 (expression -> expression GE expression .)
    LE              reduce using rule 62 (expression -> expression GE expression .)
    LT              reduce using rule 62 (expression -> expression GE expression .)
    AND             reduce using rule 62 (expression -> expression GE expression .)
    OR              reduce using rule 62 (expression -> expression GE expression .)
    =               reduce using rule 62 (expression -> expression GE expression .)
    )               reduce using rule 62 (expression -> expression GE expression .)
    ,               reduce using rule 62 (expression -> expression GE expression .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 81

    (63) expression -> expression GT expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 63 (expression -> expression GT expression .)
    NE              reduce using rule 63 (expression -> expression GT expression .)
    EQ              reduce using rule 63 (expression -> expression GT expression .)
    GE              reduce using rule 63 (expression -> expression GT expression .)
    GT              reduce using rule 63 (expression -> expression GT expression .)
    LE              reduce using rule 63 (expression -> expression GT expression .)
    LT              reduce using rule 63 (expression -> expression GT expression .)
    AND             reduce using rule 63 (expression -> expression GT expression .)
    OR              reduce using rule 63 (expression -> expression GT expression .)
    =               reduce using rule 63 (expression -> expression GT expression .)
    )               reduce using rule 63 (expression -> expression GT expression .)
    ,               reduce using rule 63 (expression -> expression GT expression .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 82

    (64) expression -> expression LE expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 64 (expression -> expression LE expression .)
    NE              reduce using rule 64 (expression -> expression LE expression .)
    EQ              reduce using rule 64 (expression -> expression LE expression .)
    GE              reduce using rule 64 (expression -> expression LE expression .)
    GT              reduce using rule 64 (expression -> expression LE expression .)
    LE              reduce using rule 64 (expression -> expression LE expression .)
    LT              reduce using rule 64 (expression -> expression LE expression .)
    AND             reduce using rule 64 (expression -> expression LE expression .)
    OR              reduce using rule 64 (expression -> expression LE expression .)
    =               reduce using rule 64 (expression -> expression LE expression .)
    )               reduce using rule 64 (expression -> expression LE expression .)
    ,               reduce using rule 64 (expression -> expression LE expression .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 83

    (65) expression -> expression LT expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 65 (expression -> expression LT expression .)
    NE              reduce using rule 65 (expression -> expression LT expression .)
    EQ              reduce using rule 65 (expression -> expression LT expression .)
    GE              reduce using rule 65 (expression -> expression LT expression .)
    GT              reduce using rule 65 (expression -> expression LT expression .)
    LE              reduce using rule 65 (expression -> expression LT expression .)
    LT              reduce using rule 65 (expression -> expression LT expression .)
    AND             reduce using rule 65 (expression -> expression LT expression .)
    OR              reduce using rule 65 (expression -> expression LT expression .)
    =               reduce using rule 65 (expression -> expression LT expression .)
    )               reduce using rule 65 (expression -> expression LT expression .)
    ,               reduce using rule 65 (expression -> expression LT expression .)
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 84

    (66) expression -> expression / expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 66 (expression -> expression / expression .)
    NE              reduce using rule 66 (expression -> expression / expression .)
    EQ              reduce using rule 66 (expression -> expression / expression .)
    GE              reduce using rule 66 (expression -> expression / expression .)
    GT              reduce using rule 66 (expression -> expression / expression .)
    LE              reduce using rule 66 (expression -> expression / expression .)
    LT              reduce using rule 66 (expression -> expression / expression .)
    /               reduce using rule 66 (expression -> expression / expression .)
    *               reduce using rule 66 (expression -> expression / expression .)
    -               reduce using rule 66 (expression -> expression / expression .)
    +               reduce using rule 66 (expression -> expression / expression .)
    AND             reduce using rule 66 (expression -> expression / expression .)
    OR              reduce using rule 66 (expression -> expression / expression .)
    =               reduce using rule 66 (expression -> expression / expression .)
    )               reduce using rule 66 (expression -> expression / expression .)
    ,               reduce using rule 66 (expression -> expression / expression .)


state 85

    (67) expression -> expression * expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 67 (expression -> expression * expression .)
    NE              reduce using rule 67 (expression -> expression * expression .)
    EQ              reduce using rule 67 (expression -> expression * expression .)
    GE              reduce using rule 67 (expression -> expression * expression .)
    GT              reduce using rule 67 (expression -> expression * expression .)
    LE              reduce using rule 67 (expression -> expression * expression .)
    LT              reduce using rule 67 (expression -> expression * expression .)
    /               reduce using rule 67 (expression -> expression * expression .)
    *               reduce using rule 67 (expression -> expression * expression .)
    -               reduce using rule 67 (expression -> expression * expression .)
    +               reduce using rule 67 (expression -> expression * expression .)
    AND             reduce using rule 67 (expression -> expression * expression .)
    OR              reduce using rule 67 (expression -> expression * expression .)
    =               reduce using rule 67 (expression -> expression * expression .)
    )               reduce using rule 67 (expression -> expression * expression .)
    ,               reduce using rule 67 (expression -> expression * expression .)


state 86

    (68) expression -> expression - expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 68 (expression -> expression - expression .)
    NE              reduce using rule 68 (expression -> expression - expression .)
    EQ              reduce using rule 68 (expression -> expression - expression .)
    GE              reduce using rule 68 (expression -> expression - expression .)
    GT              reduce using rule 68 (expression -> expression - expression .)
    LE              reduce using rule 68 (expression -> expression - expression .)
    LT              reduce using rule 68 (expression -> expression - expression .)
    -               reduce using rule 68 (expression -> expression - expression .)
    +               reduce using rule 68 (expression -> expression - expression .)
    AND             reduce using rule 68 (expression -> expression - expression .)
    OR              reduce using rule 68 (expression -> expression - expression .)
    =               reduce using rule 68 (expression -> expression - expression .)
    )               reduce using rule 68 (expression -> expression - expression .)
    ,               reduce using rule 68 (expression -> expression - expression .)
    /               shift and go to state 54
    *               shift and go to state 55


state 87

    (69) expression -> expression + expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 69 (expression -> expression + expression .)
    NE              reduce using rule 69 (expression -> expression + expression .)
    EQ              reduce using rule 69 (expression -> expression + expression .)
    GE              reduce using rule 69 (expression -> expression + expression .)
    GT              reduce using rule 69 (expression -> expression + expression .)
    LE              reduce using rule 69 (expression -> expression + expression .)
    LT              reduce using rule 69 (expression -> expression + expression .)
    -               reduce using rule 69 (expression -> expression + expression .)
    +               reduce using rule 69 (expression -> expression + expression .)
    AND             reduce using rule 69 (expression -> expression + expression .)
    OR              reduce using rule 69 (expression -> expression + expression .)
    =               reduce using rule 69 (expression -> expression + expression .)
    )               reduce using rule 69 (expression -> expression + expression .)
    ,               reduce using rule 69 (expression -> expression + expression .)
    /               shift and go to state 54
    *               shift and go to state 55


state 88

    (70) expression -> expression AND expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 70 (expression -> expression AND expression .)
    AND             reduce using rule 70 (expression -> expression AND expression .)
    OR              reduce using rule 70 (expression -> expression AND expression .)
    =               reduce using rule 70 (expression -> expression AND expression .)
    )               reduce using rule 70 (expression -> expression AND expression .)
    ,               reduce using rule 70 (expression -> expression AND expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57


state 89

    (71) expression -> expression OR expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 71 (expression -> expression OR expression .)
    OR              reduce using rule 71 (expression -> expression OR expression .)
    =               reduce using rule 71 (expression -> expression OR expression .)
    )               reduce using rule 71 (expression -> expression OR expression .)
    ,               reduce using rule 71 (expression -> expression OR expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58


state 90

    (72) expression -> expression = expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 72 (expression -> expression = expression .)
    )               reduce using rule 72 (expression -> expression = expression .)
    ,               reduce using rule 72 (expression -> expression = expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 91

    (46) for_statement -> FOR ( ; . _7_optional ; _8_optional ) statement
    (47) _7_optional -> . expression
    (48) _7_optional -> .
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    ;               reduce using rule 48 (_7_optional -> .)
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    _7_optional                    shift and go to state 111
    expression                     shift and go to state 112
    factor                         shift and go to state 30

state 92

    (51) for_statement -> FOR ( for_initializer . _9_optional ; _10_optional ) statement
    (52) _9_optional -> . expression
    (53) _9_optional -> .
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    ;               reduce using rule 53 (_9_optional -> .)
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    _9_optional                    shift and go to state 113
    expression                     shift and go to state 114
    factor                         shift and go to state 30

state 93

    (56) for_initializer -> expression_statement .
    SUPER           reduce using rule 56 (for_initializer -> expression_statement .)
    THIS            reduce using rule 56 (for_initializer -> expression_statement .)
    IDENTIFIER      reduce using rule 56 (for_initializer -> expression_statement .)
    NIL             reduce using rule 56 (for_initializer -> expression_statement .)
    FALSE           reduce using rule 56 (for_initializer -> expression_statement .)
    TRUE            reduce using rule 56 (for_initializer -> expression_statement .)
    STRING          reduce using rule 56 (for_initializer -> expression_statement .)
    NUMBER          reduce using rule 56 (for_initializer -> expression_statement .)
    NOT             reduce using rule 56 (for_initializer -> expression_statement .)
    -               reduce using rule 56 (for_initializer -> expression_statement .)
    (               reduce using rule 56 (for_initializer -> expression_statement .)
    ;               reduce using rule 56 (for_initializer -> expression_statement .)


state 94

    (57) for_initializer -> var_declaration .
    SUPER           reduce using rule 57 (for_initializer -> var_declaration .)
    THIS            reduce using rule 57 (for_initializer -> var_declaration .)
    IDENTIFIER      reduce using rule 57 (for_initializer -> var_declaration .)
    NIL             reduce using rule 57 (for_initializer -> var_declaration .)
    FALSE           reduce using rule 57 (for_initializer -> var_declaration .)
    TRUE            reduce using rule 57 (for_initializer -> var_declaration .)
    STRING          reduce using rule 57 (for_initializer -> var_declaration .)
    NUMBER          reduce using rule 57 (for_initializer -> var_declaration .)
    NOT             reduce using rule 57 (for_initializer -> var_declaration .)
    -               reduce using rule 57 (for_initializer -> var_declaration .)
    (               reduce using rule 57 (for_initializer -> var_declaration .)
    ;               reduce using rule 57 (for_initializer -> var_declaration .)


state 95

    (86) factor -> ( expression ) .
    (               reduce using rule 86 (factor -> ( expression ) .)
    .               reduce using rule 86 (factor -> ( expression ) .)
    ;               reduce using rule 86 (factor -> ( expression ) .)
    NE              reduce using rule 86 (factor -> ( expression ) .)
    EQ              reduce using rule 86 (factor -> ( expression ) .)
    GE              reduce using rule 86 (factor -> ( expression ) .)
    GT              reduce using rule 86 (factor -> ( expression ) .)
    LE              reduce using rule 86 (factor -> ( expression ) .)
    LT              reduce using rule 86 (factor -> ( expression ) .)
    /               reduce using rule 86 (factor -> ( expression ) .)
    *               reduce using rule 86 (factor -> ( expression ) .)
    -               reduce using rule 86 (factor -> ( expression ) .)
    +               reduce using rule 86 (factor -> ( expression ) .)
    AND             reduce using rule 86 (factor -> ( expression ) .)
    OR              reduce using rule 86 (factor -> ( expression ) .)
    =               reduce using rule 86 (factor -> ( expression ) .)
    )               reduce using rule 86 (factor -> ( expression ) .)
    ,               reduce using rule 86 (factor -> ( expression ) .)


state 96

    (45) while_statement -> WHILE ( expression . ) statement
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    )               shift and go to state 115
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 97

    (42) if_statement -> IF ( expression . ) statement _6_optional
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    )               shift and go to state 116
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 98

    (41) print_statement -> PRINT expression ; .
    CLASS           reduce using rule 41 (print_statement -> PRINT expression ; .)
    FUN             reduce using rule 41 (print_statement -> PRINT expression ; .)
    VAR             reduce using rule 41 (print_statement -> PRINT expression ; .)
    RETURN          reduce using rule 41 (print_statement -> PRINT expression ; .)
    FOR             reduce using rule 41 (print_statement -> PRINT expression ; .)
    WHILE           reduce using rule 41 (print_statement -> PRINT expression ; .)
    IF              reduce using rule 41 (print_statement -> PRINT expression ; .)
    PRINT           reduce using rule 41 (print_statement -> PRINT expression ; .)
    {               reduce using rule 41 (print_statement -> PRINT expression ; .)
    SUPER           reduce using rule 41 (print_statement -> PRINT expression ; .)
    THIS            reduce using rule 41 (print_statement -> PRINT expression ; .)
    IDENTIFIER      reduce using rule 41 (print_statement -> PRINT expression ; .)
    NIL             reduce using rule 41 (print_statement -> PRINT expression ; .)
    FALSE           reduce using rule 41 (print_statement -> PRINT expression ; .)
    TRUE            reduce using rule 41 (print_statement -> PRINT expression ; .)
    STRING          reduce using rule 41 (print_statement -> PRINT expression ; .)
    NUMBER          reduce using rule 41 (print_statement -> PRINT expression ; .)
    NOT             reduce using rule 41 (print_statement -> PRINT expression ; .)
    -               reduce using rule 41 (print_statement -> PRINT expression ; .)
    (               reduce using rule 41 (print_statement -> PRINT expression ; .)
    $end            reduce using rule 41 (print_statement -> PRINT expression ; .)
    }               reduce using rule 41 (print_statement -> PRINT expression ; .)
    ELSE            reduce using rule 41 (print_statement -> PRINT expression ; .)


state 99

    (73) factor -> factor ( ) .
    (               reduce using rule 73 (factor -> factor ( ) .)
    .               reduce using rule 73 (factor -> factor ( ) .)
    ;               reduce using rule 73 (factor -> factor ( ) .)
    NE              reduce using rule 73 (factor -> factor ( ) .)
    EQ              reduce using rule 73 (factor -> factor ( ) .)
    GE              reduce using rule 73 (factor -> factor ( ) .)
    GT              reduce using rule 73 (factor -> factor ( ) .)
    LE              reduce using rule 73 (factor -> factor ( ) .)
    LT              reduce using rule 73 (factor -> factor ( ) .)
    /               reduce using rule 73 (factor -> factor ( ) .)
    *               reduce using rule 73 (factor -> factor ( ) .)
    -               reduce using rule 73 (factor -> factor ( ) .)
    +               reduce using rule 73 (factor -> factor ( ) .)
    AND             reduce using rule 73 (factor -> factor ( ) .)
    OR              reduce using rule 73 (factor -> factor ( ) .)
    =               reduce using rule 73 (factor -> factor ( ) .)
    )               reduce using rule 73 (factor -> factor ( ) .)
    ,               reduce using rule 73 (factor -> factor ( ) .)


state 100

    (74) factor -> factor ( arguments . )
    )               shift and go to state 117


state 101

    (87) arguments -> expression . _11_repeat
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    (88) _11_repeat -> . _11_items
    (89) _11_repeat -> .
    (90) _11_items -> . _11_items _11_item
    (91) _11_items -> . _11_item
    (92) _11_item -> . , expression
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60
    )               reduce using rule 89 (_11_repeat -> .)
    ,               shift and go to state 121

    _11_repeat                     shift and go to state 118
    _11_items                      shift and go to state 119
    _11_item                       shift and go to state 120

state 102

    (75) factor -> factor . IDENTIFIER .
    (               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    .               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    ;               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    NE              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    EQ              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    GE              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    GT              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    LE              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    LT              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    /               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    *               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    -               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    +               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    AND             reduce using rule 75 (factor -> factor . IDENTIFIER .)
    OR              reduce using rule 75 (factor -> factor . IDENTIFIER .)
    =               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    )               reduce using rule 75 (factor -> factor . IDENTIFIER .)
    ,               reduce using rule 75 (factor -> factor . IDENTIFIER .)


state 103

    (76) factor -> SUPER . IDENTIFIER .
    (               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    .               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    ;               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    NE              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    EQ              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    GE              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    GT              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    LE              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    LT              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    /               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    *               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    -               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    +               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    AND             reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    OR              reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    =               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    )               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)
    ,               reduce using rule 76 (factor -> SUPER . IDENTIFIER .)


state 104

    (24) class_declaration -> CLASS IDENTIFIER _4_optional { . _5_repeat }
    (27) _5_repeat -> . _5_items
    (28) _5_repeat -> .
    (29) _5_items -> . _5_items _5_item
    (30) _5_items -> . _5_item
    (31) _5_item -> . function
    (16) function -> . IDENTIFIER ( ) statement_block
    (17) function -> . IDENTIFIER ( parameters ) statement_block
    }               reduce using rule 28 (_5_repeat -> .)
    IDENTIFIER      shift and go to state 44

    _5_repeat                      shift and go to state 122
    _5_items                       shift and go to state 123
    _5_item                        shift and go to state 124
    function                       shift and go to state 125

state 105

    (25) _4_optional -> LT IDENTIFIER .
    {               reduce using rule 25 (_4_optional -> LT IDENTIFIER .)


state 106

    (18) parameters -> IDENTIFIER . _3_repeat
    (19) _3_repeat -> . _3_items
    (20) _3_repeat -> .
    (21) _3_items -> . _3_items _3_item
    (22) _3_items -> . _3_item
    (23) _3_item -> . , IDENTIFIER
    )               reduce using rule 20 (_3_repeat -> .)
    ,               shift and go to state 129

    _3_repeat                      shift and go to state 126
    _3_items                       shift and go to state 127
    _3_item                        shift and go to state 128

state 107

    (16) function -> IDENTIFIER ( ) . statement_block
    (39) statement_block -> . { declarations }
    {               shift and go to state 20

    statement_block                shift and go to state 130

state 108

    (17) function -> IDENTIFIER ( parameters . ) statement_block
    )               shift and go to state 131


state 109

    (12) var_declaration -> VAR IDENTIFIER _2_optional ; .
    CLASS           reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    FUN             reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    VAR             reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    RETURN          reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    FOR             reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    WHILE           reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    IF              reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    PRINT           reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    {               reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    SUPER           reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    THIS            reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    IDENTIFIER      reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    NIL             reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    FALSE           reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    TRUE            reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    STRING          reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    NUMBER          reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    NOT             reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    -               reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    (               reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    $end            reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    }               reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)
    ;               reduce using rule 12 (var_declaration -> VAR IDENTIFIER _2_optional ; .)


state 110

    (13) _2_optional -> = expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 13 (_2_optional -> = expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 111

    (46) for_statement -> FOR ( ; _7_optional . ; _8_optional ) statement
    ;               shift and go to state 132


state 112

    (47) _7_optional -> expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 47 (_7_optional -> expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 113

    (51) for_statement -> FOR ( for_initializer _9_optional . ; _10_optional ) statement
    ;               shift and go to state 133


state 114

    (52) _9_optional -> expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ;               reduce using rule 52 (_9_optional -> expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 115

    (45) while_statement -> WHILE ( expression ) . statement
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 24
    statement                      shift and go to state 134
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    factor                         shift and go to state 30

state 116

    (42) if_statement -> IF ( expression ) . statement _6_optional
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 24
    statement                      shift and go to state 135
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    factor                         shift and go to state 30

state 117

    (74) factor -> factor ( arguments ) .
    (               reduce using rule 74 (factor -> factor ( arguments ) .)
    .               reduce using rule 74 (factor -> factor ( arguments ) .)
    ;               reduce using rule 74 (factor -> factor ( arguments ) .)
    NE              reduce using rule 74 (factor -> factor ( arguments ) .)
    EQ              reduce using rule 74 (factor -> factor ( arguments ) .)
    GE              reduce using rule 74 (factor -> factor ( arguments ) .)
    GT              reduce using rule 74 (factor -> factor ( arguments ) .)
    LE              reduce using rule 74 (factor -> factor ( arguments ) .)
    LT              reduce using rule 74 (factor -> factor ( arguments ) .)
    /               reduce using rule 74 (factor -> factor ( arguments ) .)
    *               reduce using rule 74 (factor -> factor ( arguments ) .)
    -               reduce using rule 74 (factor -> factor ( arguments ) .)
    +               reduce using rule 74 (factor -> factor ( arguments ) .)
    AND             reduce using rule 74 (factor -> factor ( arguments ) .)
    OR              reduce using rule 74 (factor -> factor ( arguments ) .)
    =               reduce using rule 74 (factor -> factor ( arguments ) .)
    )               reduce using rule 74 (factor -> factor ( arguments ) .)
    ,               reduce using rule 74 (factor -> factor ( arguments ) .)


state 118

    (87) arguments -> expression _11_repeat .
    )               reduce using rule 87 (arguments -> expression _11_repeat .)


state 119

    (88) _11_repeat -> _11_items .
    (90) _11_items -> _11_items . _11_item
    (92) _11_item -> . , expression
    )               reduce using rule 88 (_11_repeat -> _11_items .)
    ,               shift and go to state 121

    _11_item                       shift and go to state 136

state 120

    (91) _11_items -> _11_item .
    ,               reduce using rule 91 (_11_items -> _11_item .)
    )               reduce using rule 91 (_11_items -> _11_item .)


state 121

    (92) _11_item -> , . expression
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    expression                     shift and go to state 137
    factor                         shift and go to state 30

state 122

    (24) class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat . }
    }               shift and go to state 138


state 123

    (27) _5_repeat -> _5_items .
    (29) _5_items -> _5_items . _5_item
    (31) _5_item -> . function
    (16) function -> . IDENTIFIER ( ) statement_block
    (17) function -> . IDENTIFIER ( parameters ) statement_block
    }               reduce using rule 27 (_5_repeat -> _5_items .)
    IDENTIFIER      shift and go to state 44

    _5_item                        shift and go to state 139
    function                       shift and go to state 125

state 124

    (30) _5_items -> _5_item .
    IDENTIFIER      reduce using rule 30 (_5_items -> _5_item .)
    }               reduce using rule 30 (_5_items -> _5_item .)


state 125

    (31) _5_item -> function .
    IDENTIFIER      reduce using rule 31 (_5_item -> function .)
    }               reduce using rule 31 (_5_item -> function .)


state 126

    (18) parameters -> IDENTIFIER _3_repeat .
    )               reduce using rule 18 (parameters -> IDENTIFIER _3_repeat .)


state 127

    (19) _3_repeat -> _3_items .
    (21) _3_items -> _3_items . _3_item
    (23) _3_item -> . , IDENTIFIER
    )               reduce using rule 19 (_3_repeat -> _3_items .)
    ,               shift and go to state 129

    _3_item                        shift and go to state 140

state 128

    (22) _3_items -> _3_item .
    ,               reduce using rule 22 (_3_items -> _3_item .)
    )               reduce using rule 22 (_3_items -> _3_item .)


state 129

    (23) _3_item -> , . IDENTIFIER
    IDENTIFIER      shift and go to state 141


state 130

    (16) function -> IDENTIFIER ( ) statement_block .
    CLASS           reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    FUN             reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    VAR             reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    RETURN          reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    FOR             reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    WHILE           reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    IF              reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    PRINT           reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    {               reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    SUPER           reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    THIS            reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    IDENTIFIER      reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    NIL             reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    FALSE           reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    TRUE            reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    STRING          reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    NUMBER          reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    NOT             reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    -               reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    (               reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    $end            reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)
    }               reduce using rule 16 (function -> IDENTIFIER ( ) statement_block .)


state 131

    (17) function -> IDENTIFIER ( parameters ) . statement_block
    (39) statement_block -> . { declarations }
    {               shift and go to state 20

    statement_block                shift and go to state 142

state 132

    (46) for_statement -> FOR ( ; _7_optional ; . _8_optional ) statement
    (49) _8_optional -> . expression
    (50) _8_optional -> .
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    )               reduce using rule 50 (_8_optional -> .)
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    _8_optional                    shift and go to state 143
    expression                     shift and go to state 144
    factor                         shift and go to state 30

state 133

    (51) for_statement -> FOR ( for_initializer _9_optional ; . _10_optional ) statement
    (54) _10_optional -> . expression
    (55) _10_optional -> .
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    )               reduce using rule 55 (_10_optional -> .)
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    _10_optional                   shift and go to state 145
    expression                     shift and go to state 146
    factor                         shift and go to state 30

state 134

    (45) while_statement -> WHILE ( expression ) statement .
    CLASS           reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    FUN             reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    VAR             reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    IF              reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    PRINT           reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    SUPER           reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    THIS            reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    IDENTIFIER      reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    NIL             reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    FALSE           reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    TRUE            reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    STRING          reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    NUMBER          reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    NOT             reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    -               reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    $end            reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)
    ELSE            reduce using rule 45 (while_statement -> WHILE ( expression ) statement .)


state 135

    (42) if_statement -> IF ( expression ) statement . _6_optional
    (43) _6_optional -> . ELSE statement
    (44) _6_optional -> .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 148
    CLASS           reduce using rule 44 (_6_optional -> .)
    FUN             reduce using rule 44 (_6_optional -> .)
    VAR             reduce using rule 44 (_6_optional -> .)
    RETURN          reduce using rule 44 (_6_optional -> .)
    FOR             reduce using rule 44 (_6_optional -> .)
    WHILE           reduce using rule 44 (_6_optional -> .)
    IF              reduce using rule 44 (_6_optional -> .)
    PRINT           reduce using rule 44 (_6_optional -> .)
    {               reduce using rule 44 (_6_optional -> .)
    SUPER           reduce using rule 44 (_6_optional -> .)
    THIS            reduce using rule 44 (_6_optional -> .)
    IDENTIFIER      reduce using rule 44 (_6_optional -> .)
    NIL             reduce using rule 44 (_6_optional -> .)
    FALSE           reduce using rule 44 (_6_optional -> .)
    TRUE            reduce using rule 44 (_6_optional -> .)
    STRING          reduce using rule 44 (_6_optional -> .)
    NUMBER          reduce using rule 44 (_6_optional -> .)
    NOT             reduce using rule 44 (_6_optional -> .)
    -               reduce using rule 44 (_6_optional -> .)
    (               reduce using rule 44 (_6_optional -> .)
    $end            reduce using rule 44 (_6_optional -> .)
    }               reduce using rule 44 (_6_optional -> .)

    _6_optional                    shift and go to state 147

state 136

    (90) _11_items -> _11_items _11_item .
    ,               reduce using rule 90 (_11_items -> _11_items _11_item .)
    )               reduce using rule 90 (_11_items -> _11_items _11_item .)


state 137

    (92) _11_item -> , expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    ,               reduce using rule 92 (_11_item -> , expression .)
    )               reduce using rule 92 (_11_item -> , expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 138

    (24) class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .
    CLASS           reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    FUN             reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    VAR             reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    RETURN          reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    FOR             reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    WHILE           reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    IF              reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    PRINT           reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    {               reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    SUPER           reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    THIS            reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    IDENTIFIER      reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    NIL             reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    FALSE           reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    TRUE            reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    STRING          reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    NUMBER          reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    NOT             reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    -               reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    (               reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    $end            reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)
    }               reduce using rule 24 (class_declaration -> CLASS IDENTIFIER _4_optional { _5_repeat } .)


state 139

    (29) _5_items -> _5_items _5_item .
    IDENTIFIER      reduce using rule 29 (_5_items -> _5_items _5_item .)
    }               reduce using rule 29 (_5_items -> _5_items _5_item .)


state 140

    (21) _3_items -> _3_items _3_item .
    ,               reduce using rule 21 (_3_items -> _3_items _3_item .)
    )               reduce using rule 21 (_3_items -> _3_items _3_item .)


state 141

    (23) _3_item -> , IDENTIFIER .
    ,               reduce using rule 23 (_3_item -> , IDENTIFIER .)
    )               reduce using rule 23 (_3_item -> , IDENTIFIER .)


state 142

    (17) function -> IDENTIFIER ( parameters ) statement_block .
    CLASS           reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    FUN             reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    VAR             reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    RETURN          reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    FOR             reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    WHILE           reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    IF              reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    PRINT           reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    {               reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    SUPER           reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    THIS            reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    IDENTIFIER      reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    NIL             reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    FALSE           reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    TRUE            reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    STRING          reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    NUMBER          reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    NOT             reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    -               reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    (               reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    $end            reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)
    }               reduce using rule 17 (function -> IDENTIFIER ( parameters ) statement_block .)


state 143

    (46) for_statement -> FOR ( ; _7_optional ; _8_optional . ) statement
    )               shift and go to state 149


state 144

    (49) _8_optional -> expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    )               reduce using rule 49 (_8_optional -> expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 145

    (51) for_statement -> FOR ( for_initializer _9_optional ; _10_optional . ) statement
    )               shift and go to state 150


state 146

    (54) _10_optional -> expression .
    (60) expression -> expression . NE expression
    (61) expression -> expression . EQ expression
    (62) expression -> expression . GE expression
    (63) expression -> expression . GT expression
    (64) expression -> expression . LE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . / expression
    (67) expression -> expression . * expression
    (68) expression -> expression . - expression
    (69) expression -> expression . + expression
    (70) expression -> expression . AND expression
    (71) expression -> expression . OR expression
    (72) expression -> expression . = expression
    )               reduce using rule 54 (_10_optional -> expression .)
    NE              shift and go to state 48
    EQ              shift and go to state 49
    GE              shift and go to state 50
    GT              shift and go to state 51
    LE              shift and go to state 52
    LT              shift and go to state 53
    /               shift and go to state 54
    *               shift and go to state 55
    -               shift and go to state 56
    +               shift and go to state 57
    AND             shift and go to state 58
    OR              shift and go to state 59
    =               shift and go to state 60


state 147

    (42) if_statement -> IF ( expression ) statement _6_optional .
    CLASS           reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    FUN             reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    VAR             reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    RETURN          reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    FOR             reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    WHILE           reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    IF              reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    PRINT           reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    {               reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    SUPER           reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    THIS            reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    IDENTIFIER      reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    NIL             reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    FALSE           reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    TRUE            reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    STRING          reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    NUMBER          reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    NOT             reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    -               reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    (               reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    $end            reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    }               reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)
    ELSE            reduce using rule 42 (if_statement -> IF ( expression ) statement _6_optional .)


state 148

    (43) _6_optional -> ELSE . statement
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    statement                      shift and go to state 151
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 149

    (46) for_statement -> FOR ( ; _7_optional ; _8_optional ) . statement
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    statement                      shift and go to state 152
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 150

    (51) for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) . statement
    (32) statement -> . return_statement
    (33) statement -> . for_statement
    (34) statement -> . while_statement
    (35) statement -> . if_statement
    (36) statement -> . print_statement
    (37) statement -> . expression_statement
    (38) statement -> . statement_block
    (58) return_statement -> . RETURN expression ;
    (46) for_statement -> . FOR ( ; _7_optional ; _8_optional ) statement
    (51) for_statement -> . FOR ( for_initializer _9_optional ; _10_optional ) statement
    (45) while_statement -> . WHILE ( expression ) statement
    (42) if_statement -> . IF ( expression ) statement _6_optional
    (41) print_statement -> . PRINT expression ;
    (40) expression_statement -> . expression ;
    (39) statement_block -> . { declarations }
    (59) expression -> . factor
    (60) expression -> . expression NE expression
    (61) expression -> . expression EQ expression
    (62) expression -> . expression GE expression
    (63) expression -> . expression GT expression
    (64) expression -> . expression LE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression / expression
    (67) expression -> . expression * expression
    (68) expression -> . expression - expression
    (69) expression -> . expression + expression
    (70) expression -> . expression AND expression
    (71) expression -> . expression OR expression
    (72) expression -> . expression = expression
    (73) factor -> . factor ( )
    (74) factor -> . factor ( arguments )
    (75) factor -> . factor . IDENTIFIER
    (76) factor -> . SUPER . IDENTIFIER
    (77) factor -> . THIS
    (78) factor -> . IDENTIFIER
    (79) factor -> . NIL
    (80) factor -> . FALSE
    (81) factor -> . TRUE
    (82) factor -> . STRING
    (83) factor -> . NUMBER
    (84) factor -> . NOT factor
    (85) factor -> . - factor
    (86) factor -> . ( expression )
    RETURN          shift and go to state 23
    FOR             shift and go to state 25
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    PRINT           shift and go to state 29
    {               shift and go to state 20
    SUPER           shift and go to state 32
    THIS            shift and go to state 33
    IDENTIFIER      shift and go to state 19
    NIL             shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36
    STRING          shift and go to state 37
    NUMBER          shift and go to state 38
    NOT             shift and go to state 39
    -               shift and go to state 31
    (               shift and go to state 26

    statement                      shift and go to state 153
    return_statement               shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    if_statement                   shift and go to state 14
    print_statement                shift and go to state 15
    expression_statement           shift and go to state 16
    statement_block                shift and go to state 17
    expression                     shift and go to state 24
    factor                         shift and go to state 30

state 151

    (43) _6_optional -> ELSE statement .
    CLASS           reduce using rule 43 (_6_optional -> ELSE statement .)
    FUN             reduce using rule 43 (_6_optional -> ELSE statement .)
    VAR             reduce using rule 43 (_6_optional -> ELSE statement .)
    RETURN          reduce using rule 43 (_6_optional -> ELSE statement .)
    FOR             reduce using rule 43 (_6_optional -> ELSE statement .)
    WHILE           reduce using rule 43 (_6_optional -> ELSE statement .)
    IF              reduce using rule 43 (_6_optional -> ELSE statement .)
    PRINT           reduce using rule 43 (_6_optional -> ELSE statement .)
    {               reduce using rule 43 (_6_optional -> ELSE statement .)
    SUPER           reduce using rule 43 (_6_optional -> ELSE statement .)
    THIS            reduce using rule 43 (_6_optional -> ELSE statement .)
    IDENTIFIER      reduce using rule 43 (_6_optional -> ELSE statement .)
    NIL             reduce using rule 43 (_6_optional -> ELSE statement .)
    FALSE           reduce using rule 43 (_6_optional -> ELSE statement .)
    TRUE            reduce using rule 43 (_6_optional -> ELSE statement .)
    STRING          reduce using rule 43 (_6_optional -> ELSE statement .)
    NUMBER          reduce using rule 43 (_6_optional -> ELSE statement .)
    NOT             reduce using rule 43 (_6_optional -> ELSE statement .)
    -               reduce using rule 43 (_6_optional -> ELSE statement .)
    (               reduce using rule 43 (_6_optional -> ELSE statement .)
    $end            reduce using rule 43 (_6_optional -> ELSE statement .)
    }               reduce using rule 43 (_6_optional -> ELSE statement .)
    ELSE            reduce using rule 43 (_6_optional -> ELSE statement .)


state 152

    (46) for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .
    CLASS           reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    FUN             reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    VAR             reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    RETURN          reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    FOR             reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    WHILE           reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    IF              reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    PRINT           reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    {               reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    SUPER           reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    THIS            reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    IDENTIFIER      reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    NIL             reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    FALSE           reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    TRUE            reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    STRING          reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    NUMBER          reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    NOT             reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    -               reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    (               reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    $end            reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    }               reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)
    ELSE            reduce using rule 46 (for_statement -> FOR ( ; _7_optional ; _8_optional ) statement .)


state 153

    (51) for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .
    CLASS           reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    FUN             reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    VAR             reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    RETURN          reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    FOR             reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    WHILE           reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    IF              reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    PRINT           reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    {               reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    SUPER           reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    THIS            reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    IDENTIFIER      reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    NIL             reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    FALSE           reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    TRUE            reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    STRING          reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    NUMBER          reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    NOT             reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    -               reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    (               reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    $end            reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    }               reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)
    ELSE            reduce using rule 51 (for_statement -> FOR ( for_initializer _9_optional ; _10_optional ) statement .)


Conflicts:

shift/reduce conflict for ELSE in state 135 resolved as shift